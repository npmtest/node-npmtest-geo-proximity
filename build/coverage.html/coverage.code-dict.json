{"/home/travis/build/npmtest/node-npmtest-geo-proximity/test.js":"/* istanbul instrument in package npmtest_geo_proximity */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-geo-proximity/lib.npmtest_geo_proximity.js":"/* istanbul instrument in package npmtest_geo_proximity */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_geo_proximity = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_geo_proximity = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-geo-proximity/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-geo-proximity && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_geo_proximity */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_geo_proximity\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_geo_proximity.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_geo_proximity.rollup.js'] =\n            local.assetsDict['/assets.npmtest_geo_proximity.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_geo_proximity.__dirname +\n                    '/lib.npmtest_geo_proximity.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-geo-proximity/node_modules/geo-proximity/main.js":"var geohash = require('ngeohash');\n\nvar query = require('./lib/query'),\n    queryByRanges = query.queryByRanges,\n    location = query.location,\n    locations = query.locations;\n\nvar range = require('./lib/range');\n\nvar setIdCount = 0;\n\n\n// main constructor\n\nfunction Set(opts) {\n\n    opts = opts || {};\n\n    this.client = opts.client;\n    this.zset = opts.zset || 'geo:locations';\n    this.caching = opts.cache !== undefined ? opts.cache : false;\n}\n\n\n// initialization and new sets\n\nSet.prototype.initialize = function(redis_client, opts) {\n\n    opts = opts || {};\n\n    this.client = redis_client;\n    this.zset = opts.zset ? opts.zset : (this.zset ? this.zset : 'geo:locations');\n\n    return this;\n};\n\nSet.prototype.addSet = function(set_name) {\n    return new Set({\n        client: this.client,\n        zset: this.zset + ':' + (set_name || 'subset_' + randomId())\n    });\n};\n\nSet.prototype.deleteSet = function(set_name, callBack) {\n    this.client.del(this.zset + ':' + set_name, callBack);\n};\n\nSet.prototype.delete = function(callBack) {\n    this.client.del(this.zset, callBack);\n};\n\n\n// adding locations\n\nSet.prototype.addLocation = function(lat, lon, location_name, callBack) {\n    this.client.zadd(this.zset, geohash.encode_int(lat, lon, 52), location_name, callBack);\n};\n\nSet.prototype.addLocations = function(location_array, callBack) {\n\n    var args = [];\n\n    for (var i = 0; i < location_array.length; i++) {\n        args.push(geohash.encode_int(location_array[i][0], location_array[i][1], 52));\n        args.push(location_array[i][2]);\n    }\n\n    args.unshift(this.zset);\n    this.client.zadd(args, callBack);\n};\n\n\n// updating locations (same methods as add, existing locations get updated)\n\nSet.prototype.updateLocation = Set.prototype.addLocation;\n\nSet.prototype.updateLocations = Set.prototype.addLocations;\n\n\n// removing locations\n\nSet.prototype.removeLocation = function(location_name, callBack) {\n    this.client.zrem(this.zset, location_name, callBack);\n};\n\nSet.prototype.removeLocations = function(location_name_array, callBack) {\n    location_name_array.unshift(this.zset);\n    this.client.zrem(location_name_array, callBack);\n};\n\n\n// querying location positions\n\nSet.prototype.location = function(location_name, callBack) {\n    query.location(this, location_name, callBack);\n};\n\nSet.prototype.locations = function(location_name_array, callBack) {\n    query.locations(this, location_name_array, callBack);\n};\n\n\n// querying nearby locations\n\nSet.prototype.nearby = function(lat, lon, radius, opts, callBack) {\n\n    if (typeof opts === 'function' && callBack === undefined) {\n        callBack = opts;\n        opts = {};\n    }\n\n    var ranges = range(lat, lon, radius, this.caching);\n    queryByRanges(this, ranges, opts.values, callBack);\n};\n\nSet.prototype.getQueryCache = function(lat, lon, radius) {\n    return range(lat, lon, radius, false);\n};\n\nSet.prototype.nearbyWithQueryCache = function(ranges, opts, callBack) {\n\n    if (typeof opts === 'function' && callBack === undefined) {\n        callBack = opts;\n        opts = {};\n    }\n\n    queryByRanges(this, ranges, opts.values, callBack);\n};\n\n\n// helpers\n\nfunction randomId() {\n    return '' + (~~(Math.random() * 1000000000000)).toString(36) + (setIdCount++);\n}\n\n\nmodule.exports = exports = new Set();\n","/home/travis/build/npmtest/node-npmtest-geo-proximity/node_modules/geo-proximity/lib/query.js":"var geohash = require('ngeohash');\n\n\nfunction location(set, location_name, callBack) {\n\n    set.client.zscore(set.zset, location_name, function(err, reply) {\n\n        if (err) {\n            if (typeof callBack === \"function\") callBack(err, null);\n        } else {\n            if (typeof callBack === \"function\") callBack(null, parseLocation(location_name, reply));\n        }\n    });\n}\n\nfunction locations(set, location_name_array, callBack) {\n\n    var multi = set.client.multi(),\n        i;\n\n    for (i = 0; i < location_name_array.length; i++) {\n        multi.zscore(set.zset, location_name_array[i]);\n    }\n\n    multi.exec(function(err, replies) {\n\n        if (err) {\n            if (typeof callBack === \"function\") callBack(err, null);\n        } else {\n\n            var concatedReplies = [];\n\n            for (i = 0; i < replies.length; i++) {\n                concatedReplies.push(parseLocation(location_name_array[i], replies[i]));\n            }\n\n            if (typeof callBack === 'function') callBack(null, concatedReplies);\n        }\n    });\n}\n\nfunction parseLocation(location_name, hash) {\n\n    if (hash !== null) {\n\n        var latlon = geohash.decode_int(hash, 52);\n\n        return {\n            name: location_name,\n            latitude: latlon.latitude,\n            longitude: latlon.longitude\n        };\n\n    } else {\n        \n        return {\n            name: location_name,\n            latitude: null,\n            longitude: null\n        };\n    }\n}\n\n\nfunction queryByRanges(set, ranges, with_values, callBack) {\n\n    var multi = set.client.multi();\n\n    if (with_values === undefined) {\n        buildMultiWithoutValues(ranges, set.zset, multi);\n    } else {\n        buildMultiWithValues(ranges, set.zset, multi);\n    }\n\n    multi.exec(function(err, replies) {\n\n        if (err) {\n            if (typeof callBack === 'function') callBack(err, null);\n        } else {\n            if (with_values) processResultsWithValues(replies, callBack);\n            else processResultsWithoutValues(replies, callBack);\n        }\n    });\n}\n\nfunction buildMultiWithValues(ranges, zset, multi) {\n\n    var range = [];\n\n    for (var i = 0; i < ranges.length; i++) {\n        range = ranges[i];\n        multi.ZRANGEBYSCORE(zset, range[0], range[1], 'WITHSCORES');\n    }\n}\n\nfunction buildMultiWithoutValues(ranges, zset, multi) {\n\n    var range = [];\n\n    for (var i = 0; i < ranges.length; i++) {\n        range = ranges[i];\n        multi.ZRANGEBYSCORE(zset, range[0], range[1]);\n    }\n}\n\nfunction processResultsWithoutValues(replies, callBack) {\n\n    var concatedReplies = [];\n\n    for (var i = 0; i < replies.length; i++) {\n        concatedReplies = concatedReplies.concat(replies[i]);\n    }\n\n    if (typeof callBack === 'function') callBack(null, concatedReplies);\n}\n\nfunction processResultsWithValues(replies, callBack) {\n\n    var concatedReplies = [],\n        k = 0,\n        decoded;\n\n    for (var i = 0; i < replies.length; i++) {\n        for (var j = 0; j < replies[i].length; j += 2) {\n            decoded = geohash.decode_int(replies[i][j + 1], 52);\n            concatedReplies[k] = [replies[i][j], decoded.latitude, decoded.longitude];\n            k++;\n        }\n    }\n\n    if (typeof callBack === 'function') callBack(null, concatedReplies);\n}\n\n\nmodule.exports = exports = {\n    queryByRanges: queryByRanges,\n    location: location,\n    locations: locations\n};\n","/home/travis/build/npmtest/node-npmtest-geo-proximity/node_modules/geo-proximity/lib/range.js":"var geohash = require('ngeohash');\n\nvar cache = require('./cache');\n\nvar rangeIndex = [\n    0.6, //52\n    1, //50\n    2.19, //48\n    4.57, //46\n    9.34, //44\n    14.4, //42\n    33.18, //40\n    62.1, //38\n    128.55, //36\n    252.9, //34\n    510.02, //32\n    1015.8, //30\n    2236.5, //28\n    3866.9, //26\n    8749.7, //24\n    15664, //22\n    33163.5, //20\n    72226.3, //18\n    150350, //16\n    306600, //14\n    474640, //12\n    1099600, //10\n    2349600, //8\n    4849600, //6\n    10018863 //4\n];\n\n\nfunction checkCache(hash, radiusBitDepth) {\n    if (cache[radiusBitDepth][hash] !== undefined) {\n        return cache[radiusBitDepth][hash];\n    }\n    return false;\n}\n\n\nfunction rangeDepth(radius) {\n    for (var i = 0; i < rangeIndex.length - 1; i++) {\n        if (radius - rangeIndex[i] < rangeIndex[i + 1] - radius) {\n            return 52 - (i * 2);\n        }\n    }\n    return 2;\n}\n\nfunction getQueryRangesFromRadius(lat, lon, radius, caching) {\n    return getQueryRangesFromBitDepth(lat, lon, rangeDepth(radius), 52, caching);\n}\n\nfunction getQueryRangesFromBitDepth(lat, lon, radiusBitDepth, bitDepth, caching) {\n\n    var hash = geohash.encode_int(lat, lon, radiusBitDepth);\n\n    if (caching === true) {\n        var cached = checkCache(lat, lon, radiusBitDepth);\n        if (cached !== false) {\n            return cached;\n        }\n    }\n\n    var neighbors = buildBoxSet(hash, radiusBitDepth);\n    var ranges = rangesFromBoxSet(neighbors);\n\n    increaseRangeBitDepth(ranges, radiusBitDepth, bitDepth);\n\n    if (caching === true) {\n        cache[radiusBitDepth][hash] = ranges;\n    }\n\n    return ranges;\n}\n\nfunction buildBoxSet(hash, radiusBitDepth) {\n\n    var neighbors = geohash.neighbors_int(hash, radiusBitDepth);\n\n    neighbors.push(hash);\n    neighbors.sort();\n\n    if (radiusBitDepth <= 4) {\n        neighbors = getUniqueInArray(neighbors);\n    }\n\n    return neighbors;\n}\n\nfunction rangesFromBoxSet(neighbors) {\n\n    var ranges = [],\n        lowerRange = 0,\n        upperRange = 0;\n\n    for (var i = 0; i < neighbors.length; i++) {\n        lowerRange = neighbors[i];\n        upperRange = lowerRange + 1;\n        while (neighbors[i + 1] === upperRange) {\n            neighbors.shift();\n            upperRange = neighbors[i] + 1;\n        }\n        ranges.push([lowerRange, upperRange]);\n    }\n\n    return ranges;\n}\n\nfunction increaseRangeBitDepth(ranges, radiusBitDepth, bitDepth) {\n\n    var bitDiff = bitDepth - radiusBitDepth;\n    var range;\n    \n    for (var i = 0; i < ranges.length; i++) {\n        range = ranges[i];\n        range[0] = leftShift(range[0], bitDiff);\n        range[1] = leftShift(range[1], bitDiff);\n    }\n}\n\n\n// helper methods\n\nfunction leftShift(integer, shft) {\n    return integer * Math.pow(2, shft);\n}\n\nfunction getUniqueInArray(arr) {\n    var u = {},\n        a = [];\n\n    for (var i = 0; i < arr.length; ++i) {\n        if (u[arr[i]] === 1) {\n            continue;\n        }\n        a.push(arr[i]);\n        u[arr[i]] = 1;\n    }\n\n    return a;\n}\n\n\nmodule.exports = exports = getQueryRangesFromRadius;\n","/home/travis/build/npmtest/node-npmtest-geo-proximity/node_modules/geo-proximity/lib/cache.js":"var cache = [];\nfor(var i = 0; i < 53; i++){\n\tcache[i] = {};\n}\n\nmodule.exports = exports = cache;","/home/travis/build/npmtest/node-npmtest-geo-proximity/node_modules/geo-proximity/browser.js":"var range = require('./lib/range');\n\n// main constructor\n\nfunction Set(opts) {}\n\nSet.prototype.getQueryCache = function(lat, lon, radius) {\n    return range(lat, lon, radius, false);\n};\n\nmodule.exports = exports = new Set();\n"}